---
import { getCollection } from "astro:content";
import Card from "../components/Card.astro";
import Icon from "../components/Icon.astro";
import Layout from "../layouts/Layout.astro";

const posts = await getCollection('posts', (post) => post.data.draft !== true);
const tags = posts.flatMap((post) => post.data.tags);
---
<Layout
  title="Blog"
  description="Blog stuff"
>
  <div class="layout-grid-left" slot="left">
    <Card class="flex-col-card">
      <h2 class="no-mt">Filter</h2>
      <ul class="tags-list">
        {Array.from(new Set(tags)).map((tag) => (
          <li>
            <a
              class="blog-tag"
              href="/blog"
              data-tag={tag.id}
            >
              {tag.id}
            </a>
          </li>
        ))}
      </ul>
    </Card>
  </div>
  <div class="layout-grid-right" slot="right">
		<Card>
			<div class="header-container">
				<Icon name="rss" width={24} height={24} class='glow-icon' />
				<h2>Latest Posts</h2>
			</div>
			<div class="content-container">
				{posts.sort((a, b) => b.data.createdAt.getTime() - a.data.createdAt.getTime()).map((post) => (
					<a href={`/blog/${post.id}`} class="post-container" data-tags={post.data.tags.map((tag) => tag.id).join(",")}>
						<div class="post-header">
							<h3>{post.data.title}</h3>
							<span class="post-date">{post.data.createdAt.toLocaleDateString()}</span>
						</div>
						<span>{post.data.description}</span>
					</a>
				))}
			</div>
		</Card>
  </div>
</Layout>
<script>
  const tags = document.querySelectorAll<HTMLAnchorElement>('.blog-tag');
  const url = new URL(window.location.href);
  const currentTags = url.searchParams.get('tags')?.split(',').filter((tag) => tag.length > 0);
  const posts = document.querySelectorAll<HTMLAnchorElement>('.post-container');

  tags.forEach((tag) => {
    let active = false;
    if (currentTags?.includes(tag.dataset.tag!)) {
      tag.classList.add('active');
      active = true;
    }

    if (active) {
      tag.href = `/blog?tags=${currentTags?.filter((t) => t !== tag.dataset.tag).join(',')}`;
    } else {
      tag.href = `/blog?tags=${currentTags ? [...currentTags, tag.dataset.tag].join(',') : tag.dataset.tag}`;
    }
  });

  posts.forEach((post) => {
    const postTags = post.dataset.tags!.split(',');
    if (currentTags && currentTags.length > 0 && !currentTags.every((tag) => postTags.includes(tag))) {
      post.style.display = 'none';
    }
  });
</script>
<style>
  .header-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .header-container * {
    margin: 0;
  }

  .post-container {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		padding: 1rem;
		border: 1px solid #353535;
		color: #ffffff;
		text-decoration: none;
		transition: background-color .15s ease, border .15s ease;
	}

	.post-container:hover, .post-container:focus-visible {
		background-color: rgba(140, 92, 245, .125);
		border: 1px solid #8c5cf5;
	}

	.post-container:focus-visible {
		outline: none;
	}

	.post-header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
	}

	.post-header h3 {
		margin: 0;
	}

	.post-date {
		color: #c7c7c7;
	}

  .tags-list {
    display: flex;
    flex-direction: row;
    align-items: center;
    flex-wrap: wrap;
    list-style-type: none;
    margin: 0;
    padding: 0;
    gap: 1rem;
  }

  .blog-tag {
    padding: .25rem .5rem;
    background: #252525;
    color: white;
    text-decoration: none;
  }

  .blog-tag:hover, .blog-tag:focus-visible {
    background: #353535;
  }

  .blog-tag.active {
    background: #8c5cf5;
  }
</style>